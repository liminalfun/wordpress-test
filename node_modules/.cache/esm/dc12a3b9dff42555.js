'use strict';;let webpackConfig,gulp,plumber,browserSync,webpack,webpackStream,named,gulpif;_dff‍.x([["taskScripts",()=>taskScripts]]);_dff‍.w("../webpack.config.js",[["default",["webpackConfig"],function(v){webpackConfig=v}]]);_dff‍.w("gulp",[["default",["gulp"],function(v){gulp=v}]]);_dff‍.w("gulp-plumber",[["default",["plumber"],function(v){plumber=v}]]);_dff‍.w("browser-sync",[["default",["browserSync"],function(v){browserSync=v}]]);_dff‍.w("webpack",[["default",["webpack"],function(v){webpack=v}]]);_dff‍.w("webpack-stream",[["default",["webpackStream"],function(v){webpackStream=v}]]);_dff‍.w("vinyl-named-with-path",[["default",["named"],function(v){named=v}]]);_dff‍.w("gulp-if",[["default",["gulpif"],function(v){gulpif=v}]]);

// ----------------------------------------
// Configuration
// ----------------------------------------


// ----------------------------------------
// Modules
// ----------------------------------------








// -----------------------------------------------------------------------------
// Script Closure
// -----------------------------------------------------------------------------
function taskScripts(src, dest, production = true) {
    return gulp.src(src)
        .pipe(gulpif(production !== true, plumber({
            errorHandler: function (err) {
                _dff‍.g.console.log(err.message);
                this.emit('end');
            }
        })))
        .pipe(named())
        .pipe(webpackStream({
            config: [
                webpackConfig({
                    production: production,
                })
            ]
        }, webpack))
        .pipe(gulp.dest(dest))
        .pipe(browserSync.stream());
}




